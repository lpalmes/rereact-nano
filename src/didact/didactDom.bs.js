// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function addProps(domElement, props) {
  var match = props[/* id */0];
  if (match) {
    domElement.setAttribute("id", match[0]);
  }
  var match$1 = props[/* value */1];
  if (match$1) {
    domElement.setAttribute("value", match$1[0]);
  }
  var match$2 = props[/* onClick */2];
  if (match$2) {
    domElement.addEventListener("click", match$2[0]);
  }
  var match$3 = props[/* onChange */3];
  if (match$3) {
    domElement.addEventListener("change", match$3[0]);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function equalizeLists(aList, bList) {
  var aOptionList = List.map((function (a) {
          return /* Some */[a];
        }), aList);
  var bOptionList = List.map((function (a) {
          return /* Some */[a];
        }), bList);
  return /* tuple */[
          aOptionList,
          bOptionList
        ];
}

function domFromInstance(newInstance) {
  if (newInstance.tag) {
    return newInstance[0][0][/* dom */4][0];
  } else {
    return newInstance[0][/* dom */1];
  }
}

function instantiate(element) {
  var match = element[/* elementType */0];
  var instance;
  switch (match.tag | 0) {
    case 0 : 
        var dom = document.createElement("span");
        dom.innerText = match[0];
        instance = /* NodeInstance */Block.__(0, [/* record */[
              /* element */element,
              /* dom */dom,
              /* childInstances : [] */0
            ]]);
        break;
    case 1 : 
        var node = document.createElement(match[0]);
        var childInstances = List.map(instantiate, element[/* children */2]);
        List.iter((function (e) {
                if (e.tag) {
                  node.appendChild(e[0][0][/* dom */4][0]);
                  return /* () */0;
                } else {
                  node.appendChild(e[0][/* dom */1]);
                  return /* () */0;
                }
              }), childInstances);
        instance = /* NodeInstance */Block.__(0, [/* record */[
              /* element */element,
              /* dom */node,
              /* childInstances */childInstances
            ]]);
        break;
    case 2 : 
        var component = match[0];
        var instance$1 = createInstance(component, element);
        var self = createSelf(instance$1);
        var element$1 = Curry._1(component[/* render */1], self);
        var newInstance = instantiate(element$1);
        var match$1 = instance$1[0];
        match$1[/* dom */4][0] = domFromInstance(newInstance);
        match$1[/* childInstance */3][0] = /* Some */[newInstance];
        instance = /* ComponentInstance */Block.__(1, [instance$1]);
        break;
    
  }
  if (!instance.tag) {
    addProps(instance[0][/* dom */1], element[/* props */1]);
  }
  return instance;
}

function reconcile(parentDom, instance, didactElement) {
  var reconcilerImpl = function (parentDom, instance, didactElement) {
    if (instance) {
      var instance$1 = instance[0];
      var exit = 0;
      if (didactElement) {
        if (instance$1.tag) {
          var match = didactElement[0][/* elementType */0];
          var instance$2 = instance$1[0];
          switch (match.tag | 0) {
            case 0 : 
            case 1 : 
                exit = 1;
                break;
            case 2 : 
                var self = createSelf(instance$2);
                var element = Curry._1(match[0][/* render */1], self);
                var match$1 = instance$2[0];
                var childInstance = match$1[/* childInstance */3];
                childInstance[0] = reconcilerImpl(parentDom, childInstance[0], /* Some */[element]);
                var match$2 = childInstance[0];
                if (match$2) {
                  match$1[/* dom */4][0] = domFromInstance(match$2[0]);
                }
                return /* Some */[/* ComponentInstance */Block.__(1, [instance$2])];
            
          }
        } else {
          exit = 1;
        }
      } else {
        parentDom.removeChild(domFromInstance(instance$1));
        return /* None */0;
      }
      if (exit === 1) {
        var newInstance = instantiate(didactElement[0]);
        parentDom.removeChild(domFromInstance(instance$1));
        parentDom.appendChild(domFromInstance(newInstance));
        return /* Some */[newInstance];
      }
      
    } else if (didactElement) {
      var newInstance$1 = instantiate(didactElement[0]);
      parentDom.appendChild(domFromInstance(newInstance$1));
      return /* Some */[newInstance$1];
    } else {
      return /* None */0;
    }
  };
  return reconcilerImpl(parentDom, instance, didactElement);
}

function createSelf(instance) {
  var instance$1 = instance[0];
  return /* record */[
          /* state */instance$1[/* iState */1],
          /* reduce */(function (payloadToAction, payload) {
              var action = Curry._1(payloadToAction, payload);
              var stateUpdate = Curry._1(instance$1[/* component */0][/* reducer */3], action);
              instance$1[/* pendingStateUpdates */5][0] = /* :: */[
                stateUpdate,
                instance$1[/* pendingStateUpdates */5][0]
              ];
              return /* () */0;
            }),
          /* send */(function (action) {
              var match = Curry._2(instance$1[/* component */0][/* reducer */3], action, instance$1[/* iState */1]);
              var stateUpdate = match ? match[0] : instance$1[/* iState */1];
              var match$1 = instance$1[/* dom */4][0].parentNode;
              if (match$1 !== null) {
                var newrecord = instance$1.slice();
                reconcile(match$1, /* Some */[/* ComponentInstance */Block.__(1, [/* Instance */[(newrecord[/* iState */1] = stateUpdate, newrecord)]])], /* Some */[instance$1[/* element */2]]);
                return /* () */0;
              } else {
                return /* () */0;
              }
            })
        ];
}

function createInstance(component, element) {
  var iState = Curry._1(component[/* initialState */2], /* () */0);
  return /* Instance */[/* record */[
            /* component */component,
            /* iState */iState,
            /* element */element,
            /* childInstance */[/* None */0],
            /* dom */[document.createElement("span")],
            /* pendingStateUpdates */[/* [] */0]
          ]];
}

function reconcileChildren(instance, didactElement) {
  var match = equalizeLists(instance[/* childInstances */2], didactElement[/* children */2]);
  var partial_arg = instance[/* dom */1];
  return List.fold_left((function (a, b) {
                if (b) {
                  return /* :: */[
                          b[0],
                          a
                        ];
                } else {
                  return a;
                }
              }), /* [] */0, List.map2((function (param, param$1) {
                    return reconcile(partial_arg, param, param$1);
                  }), match[0], match[1]));
}

var Reconciler = /* module */[
  /* addProps */addProps,
  /* equalizeLists */equalizeLists,
  /* domFromInstance */domFromInstance,
  /* instantiate */instantiate,
  /* reconcile */reconcile,
  /* reconcileChildren */reconcileChildren,
  /* createSelf */createSelf,
  /* createInstance */createInstance
];

var instance = [/* None */0];

function render(element, parentDom) {
  var newInstance = reconcile(parentDom, instance[0], /* Some */[element]);
  instance[0] = newInstance;
  return newInstance;
}

exports.Reconciler = Reconciler;
exports.instance   = instance;
exports.render     = render;
/* No side effect */
