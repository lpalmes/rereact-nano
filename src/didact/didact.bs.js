// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List     = require("bs-platform/lib/js/list.js");
var Block    = require("bs-platform/lib/js/block.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function createDomElement(name, children, _) {
  return /* record */[
          /* elementType : Node */Block.__(1, [name]),
          /* children */children
        ];
}

function stringToElement(value) {
  return /* record */[
          /* elementType : Text */Block.__(0, [value]),
          /* children : [] */0
        ];
}

function equalizeLists(aList, bList) {
  var aOptionList = List.map((function (a) {
          return /* Some */[a];
        }), aList);
  var bOptionList = List.map((function (a) {
          return /* Some */[a];
        }), bList);
  return /* tuple */[
          aOptionList,
          bOptionList
        ];
}

function instantiate(element) {
  var match = element[/* elementType */0];
  if (match.tag) {
    var node = document.createElement(match[0]);
    var childInstances = List.map(instantiate, element[/* children */1]);
    List.iter((function (e) {
            node.appendChild(e[/* dom */1]);
            return /* () */0;
          }), childInstances);
    return /* record */[
            /* element */element,
            /* dom */node,
            /* childInstances */childInstances
          ];
  } else {
    var dom = document.createElement("span");
    dom.innerText = match[0];
    return /* record */[
            /* element */element,
            /* dom */dom,
            /* childInstances : [] */0
          ];
  }
}

function reconcile(parentDom, instance, didactElement) {
  if (instance) {
    var instance$1 = instance[0];
    if (didactElement) {
      var didactElement$1 = didactElement[0];
      if (Caml_obj.caml_equal(instance$1[/* element */0][/* elementType */0], didactElement$1[/* elementType */0])) {
        return /* Some */[/* record */[
                  /* element */didactElement$1,
                  /* dom */instance$1[/* dom */1],
                  /* childInstances */instance$1[/* childInstances */2]
                ]];
      } else {
        var newInstance = instantiate(didactElement$1);
        parentDom.removeChild(instance$1[/* dom */1]);
        parentDom.appendChild(newInstance[/* dom */1]);
        return /* Some */[newInstance];
      }
    } else {
      parentDom.removeChild(instance$1[/* dom */1]);
      return /* None */0;
    }
  } else if (didactElement) {
    var newInstance$1 = instantiate(didactElement[0]);
    parentDom.appendChild(newInstance$1[/* dom */1]);
    return /* Some */[newInstance$1];
  } else {
    return /* None */0;
  }
}

function reconcileChildren(instance, didactElement) {
  var match = equalizeLists(instance[/* childInstances */2], didactElement[/* children */1]);
  var partial_arg = instance[/* dom */1];
  return List.fold_left((function (a, b) {
                if (b) {
                  return /* :: */[
                          b[0],
                          a
                        ];
                } else {
                  return a;
                }
              }), /* [] */0, List.map2((function (param, param$1) {
                    return reconcile(partial_arg, param, param$1);
                  }), match[0], match[1]));
}

var DidactDom = /* module */[
  /* instantiate */instantiate,
  /* reconcile */reconcile,
  /* reconcileChildren */reconcileChildren
];

var instance = [/* None */0];

function render(element, parentDom) {
  var newInstance = reconcile(parentDom, instance[0], /* Some */[element]);
  instance[0] = newInstance;
  return newInstance;
}

exports.createDomElement = createDomElement;
exports.stringToElement  = stringToElement;
exports.equalizeLists    = equalizeLists;
exports.DidactDom        = DidactDom;
exports.instance         = instance;
exports.render           = render;
/* No side effect */
