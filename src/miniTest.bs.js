// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Rereact    = require("./rereact.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var RereactDom = require("./rereactDom.bs.js");

function createElement(_, _$1) {
  return Rereact.element(/* record */[
              /* debugName */"MiniTest",
              /* render */(function (param) {
                  var send = param[/* send */2];
                  return RereactDom.div(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                              RereactDom.button(/* None */0, /* None */0, /* Some */[(function () {
                                        return Curry._1(send, /* Increment */Block.__(0, [1]));
                                      })], /* None */0, /* :: */[
                                    Rereact.stringToElement("Increment"),
                                    /* [] */0
                                  ], /* () */0),
                              /* :: */[
                                RereactDom.span(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                      Rereact.stringToElement(Pervasives.string_of_int(param[/* state */0])),
                                      /* [] */0
                                    ], /* () */0),
                                /* :: */[
                                  RereactDom.button(/* None */0, /* None */0, /* Some */[(function () {
                                            return Curry._1(send, /* Decrement */Block.__(1, [1]));
                                          })], /* None */0, /* :: */[
                                        Rereact.stringToElement("Decrement"),
                                        /* [] */0
                                      ], /* () */0),
                                  /* [] */0
                                ]
                              ]
                            ], /* () */0);
                }),
              /* initialState */(function () {
                  return 1;
                }),
              /* reducer */(function (action, state) {
                  if (action.tag) {
                    var value = action[0];
                    if ((state - value | 0) >= 0) {
                      return /* Update */[state - value | 0];
                    } else {
                      return /* NoUpdate */0;
                    }
                  } else {
                    return /* Update */[state + action[0] | 0];
                  }
                })
            ]);
}

exports.createElement = createElement;
/* No side effect */
