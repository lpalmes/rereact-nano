// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Rereact         = require("./rereact/rereact.bs.js");
var Pervasives      = require("bs-platform/lib/js/pervasives.js");
var RereactElements = require("./rereact/rereactElements.bs.js");

function createElement(_, _$1) {
  return Rereact.element(/* record */[
              /* debugName */"Test component",
              /* render */(function () {
                  return RereactElements.h1(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                              Rereact.stringToElement("Hello"),
                              /* [] */0
                            ], /* () */0);
                }),
              /* initialState */(function () {
                  return /* () */0;
                }),
              /* reducer */(function (_, _$1) {
                  return /* NoUpdate */0;
                })
            ]);
}

var Test = /* module */[/* createElement */createElement];

function createElement$1(_, _$1) {
  return Rereact.element(/* record */[
              /* debugName */"MiniTest",
              /* render */(function (param) {
                  var send = param[/* send */2];
                  var state = param[/* state */0];
                  var match = +(state === 2);
                  return RereactElements.div(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                              RereactElements.button(/* None */0, /* None */0, /* Some */[(function () {
                                        return Curry._1(send, /* Increment */Block.__(0, [1]));
                                      })], /* None */0, /* :: */[
                                    Rereact.stringToElement("Increment"),
                                    /* [] */0
                                  ], /* () */0),
                              /* :: */[
                                RereactElements.span(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                      Rereact.stringToElement(Pervasives.string_of_int(state)),
                                      /* [] */0
                                    ], /* () */0),
                                /* :: */[
                                  RereactElements.button(/* None */0, /* None */0, /* Some */[(function () {
                                            return Curry._1(send, /* Decrement */Block.__(1, [1]));
                                          })], /* None */0, /* :: */[
                                        Rereact.stringToElement("Decrement"),
                                        /* [] */0
                                      ], /* () */0),
                                  /* :: */[
                                    match !== 0 ? RereactElements.ul(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                            RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                  Rereact.stringToElement("blue"),
                                                  /* [] */0
                                                ], /* () */0),
                                            /* :: */[
                                              RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                    Rereact.stringToElement("black"),
                                                    /* [] */0
                                                  ], /* () */0),
                                              /* :: */[
                                                RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                      Rereact.stringToElement("yellow"),
                                                      /* [] */0
                                                    ], /* () */0),
                                                /* :: */[
                                                  RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                        Rereact.stringToElement("green"),
                                                        /* [] */0
                                                      ], /* () */0),
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ], /* () */0) : RereactElements.ul(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                            RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                  Rereact.stringToElement("blue"),
                                                  /* [] */0
                                                ], /* () */0),
                                            /* :: */[
                                              RereactElements.li(/* None */0, /* None */0, /* None */0, /* None */0, /* :: */[
                                                    Rereact.stringToElement("black"),
                                                    /* [] */0
                                                  ], /* () */0),
                                              /* [] */0
                                            ]
                                          ], /* () */0),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ], /* () */0);
                }),
              /* initialState */(function () {
                  return 1;
                }),
              /* reducer */(function (action, state) {
                  if (action.tag) {
                    var value = action[0];
                    if ((state - value | 0) >= 0) {
                      return /* Update */[state - value | 0];
                    } else {
                      return /* NoUpdate */0;
                    }
                  } else {
                    return /* Update */[state + action[0] | 0];
                  }
                })
            ]);
}

exports.Test          = Test;
exports.createElement = createElement$1;
/* No side effect */
