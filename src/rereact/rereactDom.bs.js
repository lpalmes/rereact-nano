// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var globalInstance = [/* IFlat */Block.__(0, [/* [] */0])];

function createDomElement(name, id, value, onClick, onChange, children, _) {
  return /* Nested */Block.__(1, [
            name,
            /* record */[
              /* id */id,
              /* value */value,
              /* onClick */onClick,
              /* onChange */onChange
            ],
            children
          ]);
}

function div(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("div", param, param$1, param$2, param$3, param$4, param$5);
}

function h1(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h1", param, param$1, param$2, param$3, param$4, param$5);
}

function h2(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h2", param, param$1, param$2, param$3, param$4, param$5);
}

function h3(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h3", param, param$1, param$2, param$3, param$4, param$5);
}

function h4(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h4", param, param$1, param$2, param$3, param$4, param$5);
}

function h5(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h5", param, param$1, param$2, param$3, param$4, param$5);
}

function h6(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("h6", param, param$1, param$2, param$3, param$4, param$5);
}

function span(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("span", param, param$1, param$2, param$3, param$4, param$5);
}

function ul(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("ul", param, param$1, param$2, param$3, param$4, param$5);
}

function li(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("li", param, param$1, param$2, param$3, param$4, param$5);
}

function img(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("img", param, param$1, param$2, param$3, param$4, param$5);
}

function button(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("button", param, param$1, param$2, param$3, param$4, param$5);
}

function input(param, param$1, param$2, param$3, param$4, param$5) {
  return createDomElement("input", param, param$1, param$2, param$3, param$4, param$5);
}

function addProps(domElement, props) {
  var match = props[/* id */0];
  if (match) {
    domElement.setAttribute("id", match[0]);
  }
  var match$1 = props[/* value */1];
  if (match$1) {
    domElement.setAttribute("value", match$1[0]);
  }
  var match$2 = props[/* onClick */2];
  if (match$2) {
    domElement.addEventListener("click", match$2[0]);
  }
  var match$3 = props[/* onChange */3];
  if (match$3) {
    domElement.addEventListener("change", match$3[0]);
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function createSelf(instance) {
  return /* record */[
          /* state */instance[/* iState */2],
          /* reduce */(function (payloadToAction, payload) {
              var match = instance[/* component */0];
              if (match) {
                var action = Curry._1(payloadToAction, payload);
                var stateUpdate = Curry._1(match[0][/* reducer */3], action);
                instance[/* pendingStateUpdates */6][0] = /* :: */[
                  stateUpdate,
                  instance[/* pendingStateUpdates */6][0]
                ];
                return /* () */0;
              } else {
                return /* () */0;
              }
            }),
          /* send */(function (action) {
              var match = instance[/* component */0];
              if (match) {
                var stateUpdate = Curry._1(match[0][/* reducer */3], action);
                instance[/* pendingStateUpdates */6][0] = /* :: */[
                  stateUpdate,
                  instance[/* pendingStateUpdates */6][0]
                ];
                return /* () */0;
              } else {
                return /* () */0;
              }
            })
        ];
}

function createInstance(component, element, instanceSubTree, subElements) {
  var iState = Curry._1(component[/* initialState */2], /* () */0);
  return /* record */[
          /* component : Some */[component],
          /* element */element,
          /* iState */iState,
          /* instanceSubTree */instanceSubTree,
          /* domElement : None */0,
          /* subElements */subElements,
          /* pendingStateUpdates */[/* [] */0]
        ];
}

function mapRenderedElement(f, renderedElement) {
  if (renderedElement.tag) {
    var l = renderedElement[1];
    var nextL = List.map((function (param) {
            return mapRenderedElement(f, param);
          }), l);
    var unchanged = List.for_all2((function (prim, prim$1) {
            return +(prim === prim$1);
          }), l, nextL);
    if (unchanged !== 0) {
      return renderedElement;
    } else {
      return /* INested */Block.__(1, [
                renderedElement[0],
                nextL,
                renderedElement[2]
              ]);
    }
  } else {
    var l$1 = renderedElement[0];
    var nextL$1 = List.map(f, l$1);
    var unchanged$1 = List.for_all2((function (prim, prim$1) {
            return +(prim === prim$1);
          }), l$1, nextL$1);
    if (unchanged$1 !== 0) {
      return renderedElement;
    } else {
      return /* IFlat */Block.__(0, [nextL$1]);
    }
  }
}

function renderReactElement(reactElement) {
  if (reactElement.tag) {
    var elements = reactElement[2];
    var name = reactElement[0];
    if (name === "List") {
      return /* INested */Block.__(1, [
                name,
                List.map(renderReactElement, elements),
                /* None */0
              ]);
    } else {
      return /* INested */Block.__(1, [
                name,
                List.map(renderReactElement, elements),
                /* None */0
              ]);
    }
  } else {
    return /* IFlat */Block.__(0, [List.map(reconcile, reactElement[0])]);
  }
}

function reconcile(element) {
  if (element.tag) {
    var component = element[0];
    var instance = createInstance(component, element, /* IFlat */Block.__(0, [/* [] */0]), /* Flat */Block.__(0, [/* [] */0]));
    var self = createSelf(instance);
    var subElements = Curry._1(component[/* render */1], self);
    var instanceSubTree = renderReactElement(subElements);
    return /* Instance */[/* record */[
              /* component */instance[/* component */0],
              /* element */instance[/* element */1],
              /* iState */instance[/* iState */2],
              /* instanceSubTree */instanceSubTree,
              /* domElement */instance[/* domElement */4],
              /* subElements */subElements,
              /* pendingStateUpdates */instance[/* pendingStateUpdates */6]
            ]];
  } else {
    return /* Instance */[/* record */[
              /* component : None */0,
              /* element */element,
              /* iState : () */0,
              /* instanceSubTree : IFlat */Block.__(0, [/* [] */0]),
              /* domElement : None */0,
              /* subElements : Flat */Block.__(0, [/* [] */0]),
              /* pendingStateUpdates */[/* [] */0]
            ]];
  }
}

function executePendingStateUpdates(opaqueInstance) {
  var instance = opaqueInstance[0];
  var executeUpdate = function (state, stateUpdate) {
    var match = Curry._1(stateUpdate, state);
    if (match) {
      return match[0];
    } else {
      return state;
    }
  };
  var executeUpdates = function (_state, _stateUpdates) {
    while(true) {
      var stateUpdates = _stateUpdates;
      var state = _state;
      if (stateUpdates) {
        var nextState = executeUpdate(state, stateUpdates[0]);
        _stateUpdates = stateUpdates[1];
        _state = nextState;
        continue ;
        
      } else {
        return state;
      }
    };
  };
  var pendingUpdates = List.rev(instance[/* pendingStateUpdates */6][0]);
  instance[/* pendingStateUpdates */6][0] = /* [] */0;
  var nextState = executeUpdates(instance[/* iState */2], pendingUpdates);
  var match = +(instance[/* iState */2] === nextState);
  if (match !== 0) {
    return opaqueInstance;
  } else {
    var newrecord = instance.slice();
    return /* Instance */[(newrecord[/* iState */2] = nextState, newrecord)];
  }
}

function flushPendingUpdatesFromInstance(instance) {
  var instance$1 = executePendingStateUpdates(instance);
  console.log(instance$1[0][/* iState */2]);
  return instance$1;
}

function flushPendingUpdates(renderedElement) {
  return mapRenderedElement(flushPendingUpdatesFromInstance, renderedElement);
}

function renderRenderedElement(parentElement, oldRenderedElement, newRenderedElement) {
  if (oldRenderedElement) {
    var oldRenderedElement$1 = oldRenderedElement[0];
    var exit = 0;
    if (oldRenderedElement$1.tag) {
      var match = oldRenderedElement$1[2];
      if (match) {
        var oldDom = match[0];
        var oldElements = oldRenderedElement$1[1];
        if (newRenderedElement.tag) {
          if (newRenderedElement[2]) {
            var newName = newRenderedElement[0];
            if (oldRenderedElement$1[0] === newName) {
              var newElements = newRenderedElement[1];
              if (newName === "List") {
                return /* INested */Block.__(1, [
                          newName,
                          List.map2((function (a, b) {
                                  return renderRenderedElement(oldDom, /* Some */[a], b);
                                }), oldElements, newElements),
                          /* Some */[oldDom]
                        ]);
              } else {
                var node = document.createElement(newName);
                oldDom.appendChild(node);
                return /* INested */Block.__(1, [
                          newName,
                          List.map2((function (a, b) {
                                  return renderRenderedElement(node, /* Some */[a], b);
                                }), oldElements, newElements),
                          /* Some */[node]
                        ]);
              }
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      var oldList = oldRenderedElement$1[0];
      if (newRenderedElement.tag) {
        exit = 1;
      } else {
        var newList = newRenderedElement[0];
        if (List.length(oldList) === List.length(newList)) {
          return /* IFlat */Block.__(0, [List.map2((function (a, b) {
                            return reconcileRenderedElement(parentElement, /* Some */[a], b);
                          }), oldList, newList)]);
        } else {
          exit = 1;
        }
      }
    }
    if (exit === 1) {
      if (oldRenderedElement$1.tag) {
        var match$1 = oldRenderedElement$1[2];
        if (match$1) {
          match$1[0].removeChild(parentElement);
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                [
                  "/Users/lpalmes/Developer/reason/rereact-nano/src/rereact/rereactDom.re",
                  236,
                  4
                ]
              ];
        }
      } else {
        List.iter((function (param) {
                var domElement = param[0][/* domElement */4];
                if (domElement) {
                  domElement[0].removeChild(parentElement);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              }), oldRenderedElement$1[0]);
      }
      if (newRenderedElement.tag) {
        var elements = newRenderedElement[1];
        var name = newRenderedElement[0];
        if (name === "List") {
          return /* INested */Block.__(1, [
                    name,
                    List.map((function (x) {
                            return renderRenderedElement(parentElement, /* None */0, x);
                          }), elements),
                    newRenderedElement[2]
                  ]);
        } else {
          var node$1 = document.createElement(name);
          parentElement.appendChild(node$1);
          return /* INested */Block.__(1, [
                    name,
                    List.map((function (param) {
                            return renderRenderedElement(node$1, /* None */0, param);
                          }), elements),
                    /* Some */[node$1]
                  ]);
        }
      } else {
        return /* IFlat */Block.__(0, [List.map((function (a) {
                          return reconcileRenderedElement(parentElement, /* None */0, a);
                        }), newRenderedElement[0])]);
      }
    }
    
  } else {
    return newRenderedElement;
  }
}

function reconcileRenderedElement(parentElement, oldOpaqueInstance, newOpaqueInstance) {
  if (oldOpaqueInstance) {
    var match = oldOpaqueInstance[0][0];
    var match$1 = match[/* domElement */4];
    if (match$1) {
      var newInstance = newOpaqueInstance[0];
      var newElement = newInstance[/* element */1];
      var oldDomElement = match$1[0];
      var oldElement = match[/* element */1];
      oldDomElement.removeChild(parentElement);
      var exit = 0;
      if (oldElement.tag) {
        if (newElement.tag) {
          var newComponent = newElement[0];
          if (oldElement[0][/* debugName */0] === newComponent[/* debugName */0]) {
            var self = createSelf(newInstance);
            var subElements = Curry._1(newComponent[/* render */1], self);
            var instanceSubTree = renderReactElement(subElements);
            return /* Instance */[/* record */[
                      /* component */newInstance[/* component */0],
                      /* element */newInstance[/* element */1],
                      /* iState */newInstance[/* iState */2],
                      /* instanceSubTree */instanceSubTree,
                      /* domElement : Some */[oldDomElement],
                      /* subElements */subElements,
                      /* pendingStateUpdates */newInstance[/* pendingStateUpdates */6]
                    ]];
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      } else if (newElement.tag) {
        exit = 1;
      } else {
        oldDomElement.innerText = newElement[0];
        var newrecord = newInstance.slice();
        return /* Instance */[(newrecord[/* element */1] = newElement, newrecord)];
      }
      if (exit === 1) {
        throw [
              Caml_builtin_exceptions.match_failure,
              [
                "/Users/lpalmes/Developer/reason/rereact-nano/src/rereact/rereactDom.re",
                285,
                4
              ]
            ];
      }
      
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/lpalmes/Developer/reason/rereact-nano/src/rereact/rereactDom.re",
              279,
              2
            ]
          ];
    }
  } else {
    var instance = newOpaqueInstance[0];
    var match$2 = instance[/* domElement */4];
    if (match$2) {
      var domElement = match$2[0];
      var element = instance[/* element */1];
      domElement.removeChild(parentElement);
      if (element.tag) {
        var self$1 = createSelf(instance);
        var subElements$1 = Curry._1(element[0][/* render */1], self$1);
        var instanceSubTree$1 = renderReactElement(subElements$1);
        return /* Instance */[/* record */[
                  /* component */instance[/* component */0],
                  /* element */instance[/* element */1],
                  /* iState */instance[/* iState */2],
                  /* instanceSubTree */instanceSubTree$1,
                  /* domElement : Some */[domElement],
                  /* subElements */subElements$1,
                  /* pendingStateUpdates */instance[/* pendingStateUpdates */6]
                ]];
      } else {
        domElement.innerText = element[0];
        var newrecord$1 = instance.slice();
        return /* Instance */[(newrecord$1[/* element */1] = element, newrecord$1)];
      }
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "/Users/lpalmes/Developer/reason/rereact-nano/src/rereact/rereactDom.re",
              302,
              4
            ]
          ];
    }
  }
}

function rerender(parentElement, renderedElement) {
  var flushedRenderedElement = mapRenderedElement(flushPendingUpdatesFromInstance, renderedElement);
  if (renderedElement === flushedRenderedElement) {
    return renderedElement;
  } else {
    return renderRenderedElement(parentElement, /* Some */[renderedElement], flushedRenderedElement);
  }
}

function render(reactElement, parentElement) {
  var match = parentElement.lastElementChild;
  var instance = match !== null ? (parentElement.removeChild(match), renderReactElement(reactElement)) : renderReactElement(reactElement);
  globalInstance[0] = instance;
  setInterval((function () {
          globalInstance[0] = rerender(parentElement, globalInstance[0]);
          return /* () */0;
        }), 100);
  return globalInstance;
}

exports.globalInstance                  = globalInstance;
exports.createDomElement                = createDomElement;
exports.div                             = div;
exports.h1                              = h1;
exports.h2                              = h2;
exports.h3                              = h3;
exports.h4                              = h4;
exports.h5                              = h5;
exports.h6                              = h6;
exports.span                            = span;
exports.ul                              = ul;
exports.li                              = li;
exports.img                             = img;
exports.button                          = button;
exports.input                           = input;
exports.addProps                        = addProps;
exports.createSelf                      = createSelf;
exports.createInstance                  = createInstance;
exports.mapRenderedElement              = mapRenderedElement;
exports.renderReactElement              = renderReactElement;
exports.reconcile                       = reconcile;
exports.executePendingStateUpdates      = executePendingStateUpdates;
exports.flushPendingUpdatesFromInstance = flushPendingUpdatesFromInstance;
exports.flushPendingUpdates             = flushPendingUpdates;
exports.renderRenderedElement           = renderRenderedElement;
exports.reconcileRenderedElement        = reconcileRenderedElement;
exports.rerender                        = rerender;
exports.render                          = render;
/* No side effect */
